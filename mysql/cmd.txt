这个实验首先会建立一个student_management 数据库，里面会建立几张表（student，class，test，absence，score）。会围绕这几张表进行mysql一些语句的操作如，建立表，更改表，删除表，在单独一张表中进行查询或者跨表查询。涉及到create，drop，alter，join(left join ,inner join),group等操作。



1:Mysql 的安装：
brew install mysql.

2:mysql首次登陆修改密码：mysqladmin -u root password ‘new-password’
3:显示当前存在的数据库：

mysql> show databases;

+——————–+

| Database           |

+——————–+

| information_schema |

| mysql              |

| performance_schema |

| student_management |

| sys                |

| test3              |

+——————–+

6 rows in set (0.00 sec)

4:选择要使用的使用的数据库，
mysql> use student_mangement;

5:建立student 表：
mysql> create table student(

-> first_name VARCHAR(30) NOT NULL,

-> last_name VARCHAR(30) NOT NULL,

-> email VARCHAR(60) NULL,

-> street VARCHAR(40) NOT NULL,

-> city VARCHAR(40) NOT NULL,

-> state CHAR(2) NOT NULL DEFAULT “PA”,

-> zip MEDIUMINT UNSIGNED NOT NULL,

-> phone VARCHAR(20) NOT NULL,

-> birth_date DATE NOT NULL,

-> sex ENUM(‘M’,’F’) NOT NULL,

-> date_entered TIMESTAMP,

-> lunch_cost FLOAT NULL,

-> student_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY);

6: 显示当前已有的表。
mysql> show tables;

+——————————+

| Tables_in_student_management |

+——————————+

| student                      |

+——————————+

1 row in set (0.00 sec)

7:向表中插入学生信息：
mysql> INSERT INTO student VALUES(‘Harry’, ‘Truman’, ‘htruman@aol.com’,

-> ‘202 South St’, ‘Vancouver’, ‘WA’, 98660, ‘792-223-9810’, “1946-1-24”,

-> ‘M’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO student VALUES(‘Shelly’, ‘Johnson’, ‘sjohnson@aol.com’,

-> ‘9 Pond Rd’, ‘Sparks’, ‘NV’, 89431, ‘792-223-6734’, “1970-12-12”,

-> ‘F’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO student VALUES(‘Bobby’, ‘Briggs’, ‘bbriggs@aol.com’,

-> ’14 12th St’, ‘San Diego’, ‘CA’, 92101, ‘792-223-6178’, “1967-5-24”,

-> ‘M’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)



mysql> INSERT INTO student VALUES(‘Donna’, ‘Hayward’, ‘dhayward@aol.com’,

-> ‘120 16th St’, ‘Davenport’, ‘IA’, 52801, ‘792-223-2001’, “1970-3-24”,

-> ‘F’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO student VALUES(‘Audrey’, ‘Horne’, ‘ahorne@aol.com’,

-> ‘342 19th St’, ‘Detroit’, ‘MI’, 48222, ‘792-223-2001’, “1965-2-1”,

-> ‘F’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO student VALUES(‘James’, ‘Hurley’, ‘jhurley@aol.com’,

-> ‘2578 Cliff St’, ‘Queens’, ‘NY’, 11427, ‘792-223-1890’, “1967-1-2”,

-> ‘M’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO student VALUES(‘Lucy’, ‘Moran’, ‘lmoran@aol.com’,

-> ‘178 Dover St’, ‘Hollywood’, ‘CA’, 90078, ‘792-223-9678’, “1954-11-27”,

-> ‘F’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO student VALUES(‘Tommy’, ‘Hill’, ‘thill@aol.com’,

-> ‘672 High Plains’, ‘Tucson’, ‘AZ’, 85701, ‘792-223-1115’, “1951-12-21”,

-> ‘M’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO student VALUES(‘Andy’, ‘Brennan’, ‘abrennan@aol.com’,

-> ‘281 4th St’, ‘Jacksonville’, ‘NC’, 28540, ‘792-223-8902’, “1960-12-27”,

-> ‘M’, NOW(), 3.50, NULL);

Query OK, 1 row affected (0.00 sec)

8:从student表中查找名字。
mysql> select first_name from students;

ERROR 1146 (42S02): Table ‘student_management.students’ doesn’t exist

mysql> select first_name from student;

+————+

| first_name |

+————+

| Dale       |

| Harry      |

| Shelly     |

| Bobby      |

| Donna      |

| Audrey     |

| James      |

| Lucy       |

| Tommy      |

| Andy       |

+————+

10 rows in set (0.00 sec)

9:列出student表中的全部信息。
mysql> select * from student;

+————+———–+——————+—————–+————–+——-+——-+————–+————+—–+———————+————+————+

| first_name | last_name | email            | street          | city         | state | zip   | phone        | birth_date | sex | date_enterd         | lunch_cost | student_id |

+————+———–+——————+—————–+————–+——-+——-+————–+————+—–+———————+————+————+

| Dale       | Cooper    | decooper@aol.com | 123 main St     | Yakima       | WA    | 98901 | 792-223-8901 | 1959-02-22 | M   | 2017-09-13 15:05:08 |        3.5 |          1 |

| Harry      | Truman    | htruman@aol.com  | 202 South St    | Vancouver    | WA    | 98660 | 792-223-9810 | 1946-01-24 | M   | 2017-09-13 15:14:40 |        3.5 |          2 |

| Shelly     | Johnson   | sjohnson@aol.com | 9 Pond Rd       | Sparks       | NV    | 89431 | 792-223-6734 | 1970-12-12 | F   | 2017-09-13 15:14:46 |        3.5 |          3 |

| Bobby      | Briggs    | bbriggs@aol.com  | 14 12th St      | San Diego    | CA    | 92101 | 792-223-6178 | 1967-05-24 | M   | 2017-09-13 15:14:52 |        3.5 |          4 |

| Donna      | Hayward   | dhayward@aol.com | 120 16th St     | Davenport    | IA    | 52801 | 792-223-2001 | 1970-03-24 | F   | 2017-09-13 15:14:58 |        3.5 |          5 |

| Audrey     | Horne     | ahorne@aol.com   | 342 19th St     | Detroit      | MI    | 48222 | 792-223-2001 | 1965-02-01 | F   | 2017-09-13 15:15:03 |        3.5 |          6 |

| James      | Hurley    | jhurley@aol.com  | 2578 Cliff St   | Queens       | NY    | 11427 | 792-223-1890 | 1967-01-02 | M   | 2017-09-13 15:15:09 |        3.5 |          7 |

| Lucy       | Moran     | lmoran@aol.com   | 178 Dover St    | Hollywood    | CA    | 90078 | 792-223-9678 | 1954-11-27 | F   | 2017-09-13 15:15:14 |        3.5 |          8 |

| Tommy      | Hill      | thill@aol.com    | 672 High Plains | Tucson       | AZ    | 85701 | 792-223-1115 | 1951-12-21 | M   | 2017-09-13 15:15:14 |        3.5 |          9 |

| Andy       | Brennan   | abrennan@aol.com | 281 4th St      | Jacksonville | NC    | 28540 | 792-223-8902 | 1960-12-27 | M   | 2017-09-13 15:15:14 |        3.5 |         10 |

+————+———–+——————+—————–+————–+——-+——-+————–+————+—–+———————+————+————+

10 rows in set (0.01 sec)



11:创建class表

mysql> create table class(

-> name varchar(30) NOT NULL,

-> class_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY);

Query OK, 0 rows affected (0.01 sec)

mysql> describe class;  （describe表可以显示当前表的字段）

+———-+——————+——+—–+———+—————-+

| Field    | Type             | Null | Key | Default | Extra          |

+———-+——————+——+—–+———+—————-+

| name     | varchar(30)      | NO   |     | NULL    |                |

| class_id | int(10) unsigned | NO   | PRI | NULL    | auto_increment |

+———-+——————+——+—–+———+—————-+

2 rows in set (0.00 sec)

12:向class表中插入数据。
mysql> INSERT INTO class VALUES

-> (‘English’, NULL), (‘Speech’, NULL), (‘Literature’, NULL),

-> (‘Algebra’, NULL), (‘Geometry’, NULL), (‘Trigonometry’, NULL),

-> (‘Calculus’, NULL), (‘Earth Science’, NULL), (‘Biology’, NULL),

-> (‘Chemistry’, NULL), (‘Physics’, NULL), (‘History’, NULL),

-> (‘Art’, NULL), (‘Gym’, NULL);

Query OK, 14 rows affected (0.00 sec)

Records: 14  Duplicates: 0  Warnings: 0

13:创建test表
mysql> CREATE TABLE test(

-> date DATE NOT NULL,

-> type ENUM(‘T’, ‘Q’) NOT NULL,

-> class_id INT UNSIGNED NOT NULL,

-> test_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY);

Query OK, 0 rows affected (0.01 sec)

14:创建score表：
mysql> CREATE TABLE score(

-> student_id INT UNSIGNED NOT NULL,

-> event_id INT UNSIGNED NOT NULL,

-> score INT NOT NULL,

-> PRIMARY KEY(event_id, student_id));

Query OK, 0 rows affected (0.01 sec)

15:创建absence表，
mysql> CREATE TABLE absence(

-> student_id INT UNSIGNED NOT NULL,

-> date DATE NOT NULL,

-> PRIMARY KEY(student_id, date));

Query OK, 0 rows affected (0.01 sec)

16:想test表中增加maxscore字段。
mysql> alter table test add maxscore int not null after type;

Query OK, 0 rows affected (0.01 sec)

Records: 0  Duplicates: 0  Warnings: 0

mysql> describe test;

查询test表的字段

+———-+——————+——+—–+———+—————-+

| Field    | Type             | Null | Key | Default | Extra          |

+———-+——————+——+—–+———+—————-+

| date     | date             | NO   |     | NULL    |                |

| type     | enum(‘T’,’Q’)    | NO   |     | NULL    |                |

| maxscore | int(11)          | NO   |     | NULL    |                |

| class_id | int(10) unsigned | NO   |     | NULL    |                |

| test_id  | int(10) unsigned | NO   | PRI | NULL    | auto_increment |

+———-+——————+——+—–+———+—————-+

5 rows in set (0.00 sec)

mysql> alter table test add maxscore int not null after type;

ERROR 1060 (42S21): Duplicate column name ‘maxscore’

mysql> describe test

-> ;

+———-+——————+——+—–+———+—————-+

| Field    | Type             | Null | Key | Default | Extra          |

+———-+——————+——+—–+———+—————-+

| date     | date             | NO   |     | NULL    |                |

| type     | enum(‘T’,’Q’)    | NO   |     | NULL    |                |

| maxscore | int(11)          | NO   |     | NULL    |                |

| class_id | int(10) unsigned | NO   |     | NULL    |                |

| test_id  | int(10) unsigned | NO   | PRI | NULL    | auto_increment |

+———-+——————+——+—–+———+—————-+

5 rows in set (0.00 sec)

17：向test表中插入数据。
mysql> INSERT INTO test VALUES

-> (‘2014-8-25’, ‘Q’, 15, 1, NULL),

-> (‘2014-8-27’, ‘Q’, 15, 1, NULL),

-> (‘2014-8-29’, ‘T’, 30, 1, NULL),

-> (‘2014-8-29’, ‘T’, 30, 2, NULL),

-> (‘2014-8-27’, ‘Q’, 15, 4, NULL),

-> (‘2014-8-29’, ‘T’, 30, 4, NULL);

Query OK, 6 rows affected (0.00 sec)

Records: 6  Duplicates: 0  Warnings: 0

mysql> select * from test;

+————+——+———-+———-+———+

| date       | type | maxscore | class_id | test_id |

+————+——+———-+———-+———+

| 2014-08-25 | Q    |       15 |        1 |       1 |

| 2014-08-27 | Q    |       15 |        1 |       2 |

| 2014-08-29 | T    |       30 |        1 |       3 |

| 2014-08-29 | T    |       30 |        2 |       4 |

| 2014-08-27 | Q    |       15 |        4 |       5 |

| 2014-08-29 | T    |       30 |        4 |       6 |

+————+——+———-+———-+———+

6 rows in set (0.01 sec)

18:更改字段的名称。

mysql> alter table score change event_id test_id int unsigned not null;

Query OK, 0 rows affected (0.01 sec)

Records: 0  Duplicates: 0  Warnings: 0

mysql>

mysql> describe score;

+————+——————+——+—–+———+——-+

| Field      | Type             | Null | Key | Default | Extra |

+————+——————+——+—–+———+——-+

| student_id | int(10) unsigned | NO   | PRI | NULL    |       |

| test_id    | int(10) unsigned | NO   | PRI | NULL    |       |

| score      | int(11)          | NO   |     | NULL    |       |

+————+——————+——+—–+———+——-+

3 rows in set (0.00 sec)



20:向score表中插入数据。

mysql> INSERT INTO score VALUES

-> (1, 1, 15),

-> (1, 2, 14),

-> (1, 3, 28),

-> (1, 4, 29),

-> (1, 5, 15),

-> (1, 6, 27),

-> (2, 1, 15),

-> (2, 2, 14),

-> (2, 3, 26),

-> (2, 4, 28),

-> (2, 5, 14),

-> (2, 6, 26),

-> (3, 1, 14),

-> (3, 2, 14),

-> (3, 3, 26),

-> (3, 4, 26),

-> (3, 5, 13),

-> (3, 6, 26),

-> (4, 1, 15),

-> (4, 2, 14),

-> (4, 3, 27),

-> (4, 4, 27),

-> (4, 5, 15),

-> (4, 6, 27),

-> (5, 1, 14),

-> (5, 2, 13),

-> (5, 3, 26),

-> (5, 4, 27),

-> (5, 5, 13),

-> (5, 6, 27),

-> (6, 1, 13),

-> (6, 2, 13),

-> # Missed this day (6, 3, 24),

-> (6, 4, 26),

-> (6, 5, 13),

-> (6, 6, 26),

-> (7, 1, 13),

-> (7, 2, 13),

-> (7, 3, 25),

-> (7, 4, 27),

-> (7, 5, 13),

-> # Missed this day (7, 6, 27),

-> (8, 1, 14),

-> # Missed this day (8, 2, 13),

-> (8, 3, 26),

-> (8, 4, 23),

-> (8, 5, 12),

-> (8, 6, 24),

-> (9, 1, 15),

-> (9, 2, 13),

-> (9, 3, 28),

-> (9, 4, 27),

-> (9, 5, 14),

-> (9, 6, 27),

-> (10, 1, 15),

-> (10, 2, 13),

-> (10, 3, 26),

-> (10, 4, 27),

-> (10, 5, 12),

-> (10, 6, 22);

Query OK, 57 rows affected (0.01 sec)

Records: 57  Duplicates: 0  Warnings: 0

22：向absence表中插入数据。
mysql> INSERT INTO absence VALUES

-> (6, ‘2014-08-29’),

-> (7, ‘2014-08-29’),

-> (8, ‘2014-08-27’);

Query OK, 3 rows affected (0.00 sec)

Records: 3  Duplicates: 0  Warnings: 0

22:重命名表
mysql> rename table

-> absence to absences,

-> class to classes,

-> score to scores,

-> test to tests;

Query OK, 0 rows affected (0.01 sec)





mysql> show tables;

+——————————+

| Tables_in_student_management |

+——————————+

| absences                     |

| classes                      |

| scores                       |

| student                      |

| tests                        |

+——————————+

mysql> rename table

-> student to students;

Query OK, 0 rows affected (0.01 sec)

23:列出student表中 state＝”WA”的学生的姓名。


mysql> select first_name,last_name,state

-> from students

-> where state=”WA”;

+————+———–+——-+

| first_name | last_name | state |

+————+———–+——-+

| Dale       | Cooper    | WA    |

| Harry      | Truman    | WA    |

+————+———–+——-+

2 rows in set (0.00 sec)

24:查找在1965年出生后的学生的姓名和具体的出生日期。这里用到了year（）函数。
mysql> select first_name,last_name,birth_date

-> from students

-> where year(birth_date) >= 1965;

+————+———–+————+

| first_name | last_name | birth_date |

+————+———–+————+

| Shelly     | Johnson   | 1970-12-12 |

| Bobby      | Briggs    | 1967-05-24 |

| Donna      | Hayward   | 1970-03-24 |

| Audrey     | Horne     | 1965-02-01 |

| James      | Hurley    | 1967-01-02 |

+————+———–+————+

5 rows in set (0.00 sec)

mysql> select first_name,last_name,birth_date from students

-> where month(birth_date) = 2 or state=”CA”;

+————+———–+————+

| first_name | last_name | birth_date |

+————+———–+————+

| Dale       | Cooper    | 1959-02-22 |

| Bobby      | Briggs    | 1967-05-24 |

| Audrey     | Horne     | 1965-02-01 |

| Lucy       | Moran     | 1954-11-27 |

+————+———–+————+

4 rows in set (0.00 sec)

25:查找students表中出生日大于12号而且来自于CA和NV的学生的姓名，出生日，出生地。


mysql> select last_name,state,birth_date from students

-> where day(birth_date) >= 12 && (state=”CA” or state =”NV”);

+———–+——-+————+

| last_name | state | birth_date |

+———–+——-+————+

| Johnson   | NV    | 1970-12-12 |

| Briggs    | CA    | 1967-05-24 |

| Moran     | CA    | 1954-11-27 |

+———–+——-+————+

3 rows in set (0.00 sec)



27:查找表中last_name 不为空的学生。
mysql> select last_name from students where last_name is not null;

+———–+

| last_name |

+———–+

| Cooper    |

| Truman    |

| Johnson   |

| Briggs    |

| Hayward   |

| Horne     |

| Hurley    |

| Moran     |

| Hill      |

| Brennan   |

+———–+

10 rows in set (0.00 sec)

28:列出学生的姓名按照 last_name 排序。
mysql> select first_name,last_name

-> from students order by last_name;

+————+———–+

| first_name | last_name |

+————+———–+

| Andy       | Brennan   |

| Bobby      | Briggs    |

| Dale       | Cooper    |

| Donna      | Hayward   |

| Tommy      | Hill      |

| Audrey     | Horne     |

| James      | Hurley    |

| Shelly     | Johnson   |

| Lucy       | Moran     |

| Harry      | Truman    |

+————+———–+

10 rows in set (0.01 sec)

29:累出student表中学生的姓名和来源地，按照来源地降序排列。
mysql> select first_name,last_name,state

-> from students

-> order by state desc,last_name asc;

+————+———–+——-+

| first_name | last_name | state |

+————+———–+——-+

| Dale       | Cooper    | WA    |

| Harry      | Truman    | WA    |

| James      | Hurley    | NY    |

| Shelly     | Johnson   | NV    |

| Andy       | Brennan   | NC    |

| Audrey     | Horne     | MI    |

| Donna      | Hayward   | IA    |

| Bobby      | Briggs    | CA    |

| Lucy       | Moran     | CA    |

| Tommy      | Hill      | AZ    |

+————+———–+——-+

10 rows in set (0.00 sec)

mysql> select first_name,last_name,state from students order by state desc;

+————+———–+——-+

| first_name | last_name | state |

+————+———–+——-+

| Dale       | Cooper    | WA    |

| Harry      | Truman    | WA    |

| James      | Hurley    | NY    |

| Shelly     | Johnson   | NV    |

| Andy       | Brennan   | NC    |

| Audrey     | Horne     | MI    |

| Donna      | Hayward   | IA    |

| Bobby      | Briggs    | CA    |

| Lucy       | Moran     | CA    |

| Tommy      | Hill      | AZ    |

+————+———–+——-+

10 rows in set (0.00 sec)



30:累出5个学生的姓名。
mysql> select first_name,last_name from students limit 5;

+————+———–+

| first_name | last_name |

+————+———–+

| Dale       | Cooper    |

| Harry      | Truman    |

| Shelly     | Johnson   |

| Bobby      | Briggs    |

| Donna      | Hayward   |

+————+———–+

5 rows in set (0.01 sec)

mysql>

31:列出第5到第10个学生的姓名。
mysql> select first_name,last_name from students limit 5,10;

+————+———–+

| first_name | last_name |

+————+———–+

| Audrey     | Horne     |

| James      | Hurley    |

| Lucy       | Moran     |

| Tommy      | Hill      |

| Andy       | Brennan   |

+————+———–+

5 rows in set (0.00 sec)

32:把姓名合并，列出学生的姓名和家乡。
mysql> select concat(first_name,” “,last_name) as ‘Name‘,

-> concat(city,”, “,state) as “Hometown”

-> from students;

+—————-+——————+

| Name           | Hometown         |

+—————-+——————+

| Dale Cooper    | Yakima, WA       |

| Harry Truman   | Vancouver, WA    |

| Shelly Johnson | Sparks, NV       |

| Bobby Briggs   | San Diego, CA    |

| Donna Hayward  | Davenport, IA    |

| Audrey Horne   | Detroit, MI      |

| James Hurley   | Queens, NY       |

| Lucy Moran     | Hollywood, CA    |

| Tommy Hill     | Tucson, AZ       |

| Andy Brennan   | Jacksonville, NC |

+—————-+——————+

10 rows in set (0.00 sec)



33:列出students表中first_name包含d，last_name 包含n的学生。
mysql> select last_name,first_name from

-> students where first_name like ‘d%’ or last_name like ‘%n’;

+———–+————+

| last_name | first_name |

+———–+————+

| Cooper    | Dale       |

| Truman    | Harry      |

| Johnson   | Shelly     |

| Hayward   | Donna      |

| Moran     | Lucy       |

| Brennan   | Andy       |

+———–+————+

6 rows in set (0.01 sec)

34: 列出first_name 中第四个字母为y的学生姓名。
mysql> select last_name,first_name

-> from students

-> where first_name like ‘___y’;

+———–+————+

| last_name | first_name |

+———–+————+

| Moran     | Lucy       |

| Brennan   | Andy       |

+———–+————+

2 rows in set (0.00 sec)

35:列出student表中包含的不同的state。
mysql> select distinct state

-> from students

-> order by state;

+——-+

| state |

+——-+

| AZ    |

| CA    |

| IA    |

| MI    |

| NC    |

| NV    |

| NY    |

| WA    |

+——-+

8 rows in set (0.01 sec)

mysql> select count(distinct state)

-> from students;

+———————–+

| count(distinct state) |

+———————–+

|                     8 |

+———————–+

1 row in set (0.00 sec)

36:列出student的总人数。


mysql> select count(*)

-> from students;

+———-+

| count(*) |

+———-+

|       10 |

+———-+

1 row in set (0.00 sec)

37: 统计students表中 性别为男的记录的条数。
mysql> select count(*)

-> from students

-> where sex=’M’;

+———-+

| count(*) |

+———-+

|        6 |

+———-+

1 row in set (0.00 sec)

38:统计students表中男，女的性别个数。

mysql> select sex,count(*)

-> from students

-> group by sex;

+—–+———-+

| sex | count(*) |

+—–+———-+

| M   |        6 |

| F   |        4 |

+—–+———-+

2 rows in set (0.00 sec)

38:统计students表中每个月份出生的学生的人数。
mysql> select month(birth_date) as ‘Month’,count(*)

-> from students

-> group by month

-> order by month;

+——-+———-+

| Month | count(*) |

+——-+———-+

|     1 |        2 |

|     2 |        2 |

|     3 |        1 |

|     5 |        1 |

|    11 |        1 |

|    12 |        3 |

+——-+———-+

6 rows in set (0.01 sec)

39:列出在student表中学生来源个数超过2个州。
mysql> select state,count(state) as ‘Amount’ from students group by state having Amount > 1;

+——-+——–+

| state | Amount |

+——-+——–+

| CA    |      2 |

| WA    |      2 |

+——-+——–+

2 rows in set (0.00 sec)

40:列出student表中每个州中包含的学生的个数。
mysql> select state,count(state) as ‘Amount’ from students group by state;

+——-+——–+

| state | Amount |

+——-+——–+

| AZ    |      1 |

| CA    |      2 |

| IA    |      1 |

| MI    |      1 |

| NC    |      1 |

| NV    |      1 |

| NY    |      1 |

| WA    |      2 |

+——-+——–+

8 rows in set (0.01 sec)

41:统计scores表中每种（以test_id作为区分）考试的最低分，最高分，平均分，最高和最低分的差值。










mysql> select test_id as ‘Test’, min(score) as min, max(score) as max, max(score) – min(score) as ‘range’ , sum(score) as total, avg(score) as average from scores group by test_id;

+——+——+——+——-+——-+———+

| Test | min  | max  | range | total | average |

+——+——+——+——-+——-+———+

|    1 |   13 |   15 |     2 |   143 | 14.3000 |

|    2 |   13 |   14 |     1 |   121 | 13.4444 |

|    3 |   25 |   28 |     3 |   238 | 26.4444 |

|    4 |   23 |   29 |     6 |   267 | 26.7000 |

|    5 |   12 |   15 |     3 |   134 | 13.4000 |

|    6 |   22 |   27 |     5 |   232 | 25.7778 |

+——+——+——+——-+——-+———+

6 rows in set (0.00 sec)

42:列出absences表的内容。
mysql> select * from absences;

+————+————+

| student_id | date       |

+————+————+

|          6 | 2014-08-29 |

|          7 | 2014-08-29 |

|          8 | 2014-08-27 |

+————+————+

3 rows in set (0.00 sec)

43:累出scores表中的内容。
mysql> describe scores;

+————+——————+——+—–+———+——-+

| Field      | Type             | Null | Key | Default | Extra |

+————+——————+——+—–+———+——-+

| student_id | int(10) unsigned | NO   | PRI | NULL    |       |

| test_id    | int(10) unsigned | NO   | PRI | NULL    |       |

| score      | int(11)          | NO   |     | NULL    |       |

+————+——————+——+—–+———+——-+

3 rows in set (0.00 sec)

44: 列出score表中student_id 等于6的条目，（就是student_id 为6的学生参加的考试）。


mysql> select student_id,test_id from scores

-> where student_id = 6;

+————+———+

| student_id | test_id |

+————+———+

|          6 |       1 |

|          6 |       2 |

|          6 |       4 |

|          6 |       5 |

|          6 |       6 |

+————+———+

5 rows in set (0.00 sec)

44:向students表中插入一条记录。
mysql> insert into scores values(6,3,4);

Query OK, 1 row affected (0.00 sec)



45:删除students表中student_id 等于6的那条记录。
mysql> delete from absences where student_id = 6;

Query OK, 1 row affected (0.01 sec)

46:查询发现确实没有student_id  = 6的那条记录了。
mysql> select * from absences;

+————+————+

| student_id | date       |

+————+————+

|          7 | 2014-08-29 |

|          8 | 2014-08-27 |

+————+————+

2 rows in set (0.00 sec)

47：absences表中增加一个字段 test_taken.

mysql> alter table absences add column test_taken char(1) not null default ‘F’;

Query OK, 0 rows affected (0.04 sec)

Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from absences;

+————+————+————+

| student_id | date       | test_taken |

+————+————+————+

|          7 | 2014-08-29 | F          |

|          8 | 2014-08-27 | F          |

+————+————+————+

2 rows in set (0.01 sec)



48:test_taken字段char类型改为enum类型。
mysql> alter table absences modify column test_taken enum(‘T’,’F’) not null default ‘F’;

Query OK, 2 rows affected (0.01 sec)

Records: 2  Duplicates: 0  Warnings: 0

49: 列出absence 表中的内容。
mysql> select * from absences

-> ;

+————+————+————+

| student_id | date       | test_taken |

+————+————+————+

|          7 | 2014-08-29 | F          |

|          8 | 2014-08-27 | F          |

+————+————+————+

2 rows in set (0.00 sec)

50:删除absences表中的test_taken 字段。
mysql> alter table absences

-> drop column test_taken;

Query OK, 0 rows affected (0.04 sec)

Records: 0  Duplicates: 0  Warnings: 0

51:列出absences表中的内容。
mysql> select * from absences;

+————+————+

| student_id | date       |

+————+————+

|          7 | 2014-08-29 |

|          8 | 2014-08-27 |

+————+————+



52:改变student_id 的类型。

mysql> alter table absences

-> change student_id student_id int unsigned not null;

Query OK, 0 rows affected (0.01 sec)

Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from absences;

+————+————+

| student_id | date       |

+————+————+

|          7 | 2014-08-29 |

|          8 | 2014-08-27 |

+————+————+

2 rows in set (0.01 sec)

55:累出student_id 等于4的学生参加过的考试和分数。
mysql> select * from scores where student_id = 4;

+————+———+——-+

| student_id | test_id | score |

+————+———+——-+

|          4 |       1 |    15 |

|          4 |       2 |    14 |

|          4 |       3 |    27 |

|          4 |       4 |    27 |

|          4 |       5 |    15 |

|          4 |       6 |    27 |

+————+———+——-+

6 rows in set (0.00 sec)

56:更改student_id为4 和 test_id为3 的学生的分数为25.



mysql> update scores set score=25 where student_id=4 and test_id=3;

Query OK, 1 row affected (0.01 sec)

Rows matched: 1  Changed: 1  Warnings: 0

56:列出出生日期从1960-1-1到1970-1-1’的学生的姓名和出生日期。


mysql> select first_name,last_name,birth_date

-> from students

-> where birth_date

-> between ‘1960-1-1’ and ‘1970-1-1’;

+————+———–+————+

| first_name | last_name | birth_date |

+————+———–+————+

| Bobby      | Briggs    | 1967-05-24 |

| Audrey     | Horne     | 1965-02-01 |

| James      | Hurley    | 1967-01-02 |

| Andy       | Brennan   | 1960-12-27 |

+————+———–+————+

4 rows in set (0.00 sec)

57:列出first_name 中包含boddy和lucy的条数。

mysql> select first_name,last_name

-> from students

-> where first_name IN (‘boddy’,’lucy’);

+————+———–+

| first_name | last_name |

+————+———–+

| Lucy       | Moran     |

+————+———–+

1 row in set (0.00 sec)

59:从tests和scores表中吵到在2014－08－25中发生的考试和参加这些考试的学生的student_id.
mysql> select student_id,date,score,maxscore

-> from tests,scores

-> where date = ‘2014-08-25’

-> and tests.test_id = scores.test_id;

+————+————+——-+———-+

| student_id | date       | score | maxscore |

+————+————+——-+———-+

|          1 | 2014-08-25 |    15 |       15 |

|          2 | 2014-08-25 |    15 |       15 |

|          3 | 2014-08-25 |    14 |       15 |

|          4 | 2014-08-25 |    15 |       15 |

|          5 | 2014-08-25 |    14 |       15 |

|          6 | 2014-08-25 |    13 |       15 |

|          7 | 2014-08-25 |    13 |       15 |

|          8 | 2014-08-25 |    14 |       15 |

|          9 | 2014-08-25 |    15 |       15 |

|         10 | 2014-08-25 |    15 |       15 |

+————+————+——-+———-+

10 rows in set (0.00 sec)

60:从tests，scores，students表中找出在 2014-08-25号参加考试的学生的姓名，分数和最大分数。










mysql> select concat(students.first_name,” “,students.last_name) as Name, tests.date,scores.score,tests.maxscore from tests,scores,students where date = ‘2014-08-25’ and tests.test_id = scores.test_id and scores.student_id = students.student_id;

+—————-+————+——-+———-+

| Name           | date       | score | maxscore |

+—————-+————+——-+———-+

| Dale Cooper    | 2014-08-25 |    15 |       15 |

| Harry Truman   | 2014-08-25 |    15 |       15 |

| Shelly Johnson | 2014-08-25 |    14 |       15 |

| Bobby Briggs   | 2014-08-25 |    15 |       15 |

| Donna Hayward  | 2014-08-25 |    14 |       15 |

| Audrey Horne   | 2014-08-25 |    13 |       15 |

| James Hurley   | 2014-08-25 |    13 |       15 |

| Lucy Moran     | 2014-08-25 |    14 |       15 |

| Tommy Hill     | 2014-08-25 |    15 |       15 |

| Andy Brennan   | 2014-08-25 |    15 |       15 |

+—————-+————+——-+———-+

10 rows in set (0.00 sec)



61：从students 和absences表中列出缺勤的学生。


mysql> select students.student_id, concat(students.first_name,” “,students.last_name) as Name, count(absences.date) as Absences from students,absences  where students.student_id = absences.student_id group by students.student_id;

+————+————–+———-+

| student_id | Name         | Absences |

+————+————–+———-+

|          7 | James Hurley |        1 |

|          8 | Lucy Moran   |        1 |

+————+————–+———-+

2 rows in set (0.01 sec)

62：列出所有学生的缺勤情况，因为用的left join 所以没有缺勤记录的学生的缺勤个数位0，如果right join的话，就只显示缺勤的学生了。






mysql> select students.student_id,

-> concat(students.first_name,” “,students.last_name) as name,

-> count(absences.date) as absences

-> from students left join absences

-> on students.student_id = absences.student_id

-> group by students.student_id;

+————+—————-+———-+

| student_id | name           | absences |

+————+—————-+———-+

|          1 | Dale Cooper    |        0 |

|          2 | Harry Truman   |        0 |

|          3 | Shelly Johnson |        0 |

|          4 | Bobby Briggs   |        0 |

|          5 | Donna Hayward  |        0 |

|          6 | Audrey Horne   |        0 |

|          7 | James Hurley   |        1 |

|          8 | Lucy Moran     |        1 |

|          9 | Tommy Hill     |        0 |

|         10 | Andy Brennan   |        0 |

+————+—————-+———-+



mysql> select students.student_id,

-> concat(students.first_name,” “,students.last_name) as name,

-> count(absences.date) as absences

-> from students right join absences

-> on students.student_id = absences.student_id

-> group by students.student_id;

+————+————–+———-+

| student_id | name         | absences |

+————+————–+———-+

|          7 | James Hurley |        1 |

|          8 | Lucy Moran   |        1 |

+————+————–+———-+

63:从students 和 scores 表中找出分数小于等于15分的纪录。

mysql> select students.first_name,

-> students.last_name,

-> scores.test_id,

-> scores.score

-> from students

-> inner join scores

-> on students.student_id = scores.student_id

-> where scores.score <= 15

-> order by scores.test_id;

+————+———–+———+——-+

| first_name | last_name | test_id | score |

+————+———–+———+——-+

| Dale       | Cooper    |       1 |    15 |

| Harry      | Truman    |       1 |    15 |

| Shelly     | Johnson   |       1 |    14 |

| Bobby      | Briggs    |       1 |    15 |

| Donna      | Hayward   |       1 |    14 |

| Audrey     | Horne     |       1 |    13 |

| James      | Hurley    |       1 |    13 |

| Lucy       | Moran     |       1 |    14 |

| Tommy      | Hill      |       1 |    15 |

| Andy       | Brennan   |       1 |    15 |

| Dale       | Cooper    |       2 |    14 |

| Harry      | Truman    |       2 |    14 |

| Shelly     | Johnson   |       2 |    14 |

| Bobby      | Briggs    |       2 |    14 |

| Donna      | Hayward   |       2 |    13 |

| Audrey     | Horne     |       2 |    13 |

| James      | Hurley    |       2 |    13 |

| Tommy      | Hill      |       2 |    13 |

| Andy       | Brennan   |       2 |    13 |

| Audrey     | Horne     |       3 |     4 |

| Dale       | Cooper    |       5 |    15 |

| Harry      | Truman    |       5 |    14 |

| Shelly     | Johnson   |       5 |    13 |

| Bobby      | Briggs    |       5 |    15 |

| Donna      | Hayward   |       5 |    13 |

| Audrey     | Horne     |       5 |    13 |

| James      | Hurley    |       5 |    13 |

| Lucy       | Moran     |       5 |    12 |

| Tommy      | Hill      |       5 |    14 |

| Andy       | Brennan   |       5 |    12 |

+————+———–+———+——-+

30 rows in set (0.00 sec)



以上的实验操作来源于下面的视频。

https://www.youtube.com/watch?v=yPu6qV5byu4.

其他：

1:mysql_upgrade 命令执行失败的问题：

Error occurred: Cannot setup server variables.

解决方法：1:mysqld --skip-grant-tables &
2:mysql_upgrade

3:mysql安装完后，需要启动后才能使用,否则会出现下面的错误：

ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)

解决方法位：mysql.server start
